#!/bin/bash

# Skrip ini direka untuk menerima path skrip menu utama sebagai argumen pertama.
# Contoh panggilan dari menu utama: bash /path/to/this_script.sh "/path/to/main_menu.sh"
MAIN_MENU_SCRIPT="$1"

# Warna ANSI untuk output terminal
RED_BG='\033[41m'
NC='\033[0m'

# --- Fungsi Umum ---
garis() {
  echo "----------------------------------------"
}

# Fungsi bar loading yang dioptimumkan (menggunakan PID, bukan fail sementara)
fun_bar() {
    local command_to_run="$1"
    
    # Jalankan arahan di latar belakang
    ($command_to_run) >/dev/null 2>&1 &
    local pid=$! # Dapatkan Process ID (PID) arahan tersebut

    # Animasi loading
    tput civis # Sembunyikan kursor
    echo -ne "  \033[0;33mPlease Wait Loading \033[1;37m- \033[0;33m["
    while kill -0 $pid 2>/dev/null; do
        echo -ne "\033[0;32m="
        sleep 0.15
    done
    
    # Tunggu proses selesai dan dapatkan status keluar (berjaya atau gagal)
    wait $pid
    local exit_code=$?

    # Paparkan hasil
    if [ $exit_code -eq 0 ]; then
        echo -e "\033[0;33m]\033[1;37m -\033[1;32m OK !\033[1;37m"
    else
        echo -e "\033[0;33m]\033[1;37m -\033[1;91m FAILED !\033[1;37m"
    fi
    tput cnorm # Tampilkan kursor semula
}

# --- Fungsi Reset Layanan ---
# Semua fungsi ini akan dipanggil oleh fun_bar
res1() { systemctl daemon-reload; }
res2() { systemctl restart nginx; }
res3() { systemctl restart xray; }
res4() { systemctl restart rc-local; }
res7() { systemctl restart dropbear; }
res8() { systemctl restart ws-stunnel; } # Pastikan nama servis ini betul
res9() { systemctl restart openvpn; }
res10() { systemctl restart cron; }
res13() { systemctl restart squid; }
res14() {
    systemctl restart badvpn1
    systemctl restart badvpn2
    systemctl restart badvpn3
}

# --- Fungsi Utama Skrip ---

run_auto_service_reset() {
    clear
    echo -e "${RED_BG}                     Restart Service Server                    ${NC}"
    echo
    echo -e "  \033[1;91m Service: daemon-reload\033[1;37m"; fun_bar res1
    echo -e "  \033[1;91m Service: nginx\033[1;37m"; fun_bar res2
    echo -e "  \033[1;91m Service: xray\033[1;37m"; fun_bar res3
    echo -e "  \033[1;91m Service: rc-local\033[1;37m"; fun_bar res4
    echo -e "  \033[1;91m Service: dropbear\033[1;37m"; fun_bar res7
    echo -e "  \033[1;91m Service: websocket\033[1;37m"; fun_bar res8
    echo -e "  \033[1;91m Service: openvpn\033[1;37m"; fun_bar res9
    echo -e "  \033[1;91m Service: cron\033[1;37m"; fun_bar res10
    echo -e "  \033[1;91m Service: squid\033[1;37m"; fun_bar res13
    echo -e "  \033[1;91m Service: badvpn\033[1;37m"; fun_bar res14
    echo

    echo "Restarting badvpn UDPGW screens..."
    pkill -f "badvpn-udpgw"
    sleep 1
    screen -dmS badvpn1 badvpn-udpgw --listen-addr 127.0.0.1:7100 --max-clients 1000
    screen -dmS badvpn2 badvpn-udpgw --listen-addr 127.0.0.1:7200 --max-clients 1000
    screen -dmS badvpn3 badvpn-udpgw --listen-addr 127.0.0.1:7300 --max-clients 1000
    
    echo "Reset layanan selesai."
    # Hanya jeda jika bukan dijalankan oleh cron
    if [[ "$2" != "cron" ]]; then
        read -n 1 -s -r -p "Tekan sebarang kekunci untuk kembali..."
    fi
}

schedule_auto_reset_menu() {
  local RESET_COMMAND_SCRIPT
  RESET_COMMAND_SCRIPT="$(readlink -f "$0")"

  set_cron_job() {
    local interval=$1; local cron_entry
    (crontab -l 2>/dev/null | grep -v -F "# [AutoResetScript]" || true) | crontab -
    case $interval in
      "1jam") cron_entry="0 * * * * bash $RESET_COMMAND_SCRIPT '' auto_service_reset cron # [AutoResetScript]";;
      "3jam") cron_entry="0 */3 * * * bash $RESET_COMMAND_SCRIPT '' auto_service_reset cron # [AutoResetScript]";;
      "6jam") cron_entry="0 */6 * * * bash $RESET_COMMAND_SCRIPT '' auto_service_reset cron # [AutoResetScript]";;
      "12jam") cron_entry="0 */12 * * * bash $RESET_COMMAND_SCRIPT '' auto_service_reset cron # [AutoResetScript]";;
      *) echo "Interval tidak sah."; return 1;;
    esac
    (crontab -l 2>/dev/null; echo "$cron_entry") | crontab -
    echo "Jadual reset telah ditetapkan untuk setiap '$interval'."
  }

  remove_cron_job() {
    (crontab -l 2>/dev/null | grep -v -F "# [AutoResetScript]" || true) | crontab -
    echo "Semua jadual auto reset telah dipadam."
  }

  while true; do
    clear; garis; echo "       ATUR JADUAL AUTO RESET       "; garis
    echo "1. Setiap 1 Jam"; echo "2. Setiap 3 Jam"; echo "3. Setiap 6 Jam"
    echo "4. Setiap 12 Jam"; echo "5. Padam Jadual Auto Reset"; echo "0. Kembali"; garis
    read -p "Masukkan pilihan (0-5): " pilihan
    case $pilihan in
      1) set_cron_job "1jam";; 2) set_cron_job "3jam";;
      3) set_cron_job "6jam";; 4) set_cron_job "12jam";;
      5) remove_cron_job;; 0) return;;
      *) echo "Pilihan tidak sah.";;
    esac
    read -p "Tekan Enter untuk teruskan..."
  done
}

# Periksa jika skrip dijalankan oleh cron
if [[ "$2" == "auto_service_reset" ]]; then
    run_auto_service_reset "$1" "$2"
    exit 0
fi

# Loop menu utama skrip ini
while true; do
  clear; garis; echo "         MENU UTAMA RESET         "; garis
  echo "1. Reset Semua Layanan Server"
  echo "2. Atur Jadual Auto Reset"
  echo "0. Kembali ke Menu Utama"; garis
  read -p "Masukkan pilihan (0-2): " pilihan
  case $pilihan in
    1) run_auto_service_reset;;
    2) schedule_auto_reset_menu;;
    0)
      if [[ -n "$MAIN_MENU_SCRIPT" && -f "$MAIN_MENU_SCRIPT" ]]; then
          echo "Kembali ke menu utama..."
          sleep 1
          # Jalankan skrip menu utama dan keluar dari skrip ini
          exec bash "$MAIN_MENU_SCRIPT"
      else
          echo -e "\033[0;31mTidak dapat kembali. Skrip ini perlu dipanggil dari menu utama.\033[0m"
          echo "Keluar dari skrip reset."
          sleep 2
          break
      fi
      ;;
    *) echo "Pilihan tidak sah."; read -p "Tekan Enter untuk teruskan...";;
  esac
done}

# --- Fungsi dari Skrip Pertama (Menu Reset) ---
auto_reset_menu() {
  garis
  echo "Melakukan reset otomatis..."
  run_auto_service_reset # Panggil fungsi reset layanan
  garis
}

reset_manual() {
  garis
  echo "Reset manual telah dipilih."
  echo "Silakan lakukan langkah-langkah reset Anda secara manual."
  garis
  read -p "Tekan Enter untuk melanjutkan..."
}

# --- Fungsi Jadwal Auto Reset (dari skrip ketiga) ---
# Lokasi skrip ini sendiri, agar bisa dipanggil oleh cron
# Gunakan $0 untuk mendapatkan jalur skrip saat ini.
# Pastikan skrip ini dieksekusi dengan bash dan memiliki izin eksekusi (chmod +x)
RESET_COMMAND_SCRIPT="$(readlink -f "$0")" 
# Skrip ini akan dipanggil dengan argumen "auto_service_reset" untuk menjalankan fungsi reset layanan
# Jadi perintah cron akan menjadi: "bash /path/to/this/script.sh auto_service_reset"

set_cron_job() {
  local interval=$1
  local cron_entry=""

  # Hapus entri cron sebelumnya dari skrip ini jika ada
  (crontab -l 2>/dev/null | grep -v -F "# [AutoResetScript]" || true) | crontab -

  case $interval in
    "1jam")
      cron_entry="0 * * * * bash $RESET_COMMAND_SCRIPT auto_service_reset # [AutoResetScript] Reset setiap 1 jam"
      ;;
    "3jam")
      cron_entry="0 */3 * * * bash $RESET_COMMAND_SCRIPT auto_service_reset # [AutoResetScript] Reset setiap 3 jam"
      ;;
    "6jam")
      cron_entry="0 */6 * * * bash $RESET_COMMAND_SCRIPT auto_service_reset # [AutoResetScript] Reset setiap 6 jam"
      ;;
    "12jam")
      cron_entry="0 */12 * * * bash $RESET_COMMAND_SCRIPT auto_service_reset # [AutoResetScript] Reset setiap 12 jam"
      ;;
    *)
      echo "Interval tidak dikenal."
      return 1
      ;;
  esac

  # Tambahkan entri cron baru
  (crontab -l 2>/dev/null; echo "$cron_entry") | crontab -
  echo "Jadwal reset diatur untuk '$interval'."
  echo "Perintah cron yang ditambahkan: $cron_entry"
}

remove_cron_job() {
  # Hapus entri cron yang dibuat oleh skrip ini
  (crontab -l 2>/dev/null | grep -v -F "# [AutoResetScript]" || true) | crontab -
  echo "Semua jadwal reset otomatis yang dibuat oleh skrip ini telah dihapus."
}

# Menu untuk pengaturan jadwal auto reset
schedule_auto_reset_menu() {
  while true; do
    clear
    garis
    echo "       ATUR JADWAL AUTO RESET       "
    garis
    echo "1. Setiap 1 Jam"
    echo "2. Setiap 3 Jam"
    echo "3. Setiap 6 Jam"
    echo "4. Setiap 12 Jam"
    echo "5. Nonaktifkan Auto Reset"
    echo "0. Kembali ke Menu Utama"
    garis

    read -p "Masukkan pilihan Anda (0-5): " pilihan

    case $pilihan in
      1)
        set_cron_job "1jam"
        read -p "Tekan Enter untuk melanjutkan..."
        ;;
      2)
        set_cron_job "3jam"
        read -p "Tekan Enter untuk melanjutkan..."
        ;;
      3)
        set_cron_job "6jam"
        read -p "Tekan Enter untuk melanjutkan..."
        ;;
      4)
        set_cron_job "12jam"
        read -p "Tekan Enter untuk melanjutkan..."
        ;;
      5)
        remove_cron_job
        read -p "Tekan Enter untuk melanjutkan..."
        ;;
      0)
        garis
        echo "Keluar dari pengaturan jadwal auto reset."
        garis
        return # Kembali ke menu utama
        ;;
      *)
        echo "Pilihan tidak valid. Silakan masukkan 0-5."
        read -p "Tekan Enter untuk melanjutkan..."
        ;;
    esac
  done
}

# --- Menu Utama ---
tampilkan_menu_utama() {
  clear # Membersihkan layar terminal
  garis
  echo "         MENU UTAMA RESET         "
  garis
  echo "1. Reset Otomatis (Reset Layanan Server)"
  echo "2. Reset Manual"
  echo "3. Atur Jadwal Auto Reset"
  echo "0. Keluar"
  garis
}

# Periksa jika skrip dipanggil dengan argumen "auto_service_reset"
# Ini digunakan oleh cron job untuk menjalankan reset layanan tanpa menampilkan menu
if [[ "$1" == "auto_service_reset" ]]; then
    run_auto_service_reset
    exit 0
fi

# Loop utama untuk menampilkan menu utama sampai pengguna memilih untuk keluar
while true; do
  tampilkan_menu_utama
  read -p "Masukkan pilihan Anda (0-3): " pilihan

  case $pilihan in
    1)
      auto_reset_menu # Memanggil fungsi reset otomatis layanan
      ;;
    2)
      reset
      ;;
    3)
      schedule_auto_reset_menu # Memanggil menu pengaturan jadwal auto reset
      ;;
    0)
      menu
      ;;
    *)
      echo "Pilihan tidak valid. Silakan masukkan 0, 1, 2, atau 3."
      read -p "Tekan Enter untuk melanjutkan..."
      ;;
  esac
done
